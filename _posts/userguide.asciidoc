:toc: macro
toc::[]
:icons: font
:iconfont-remote!:
:iconfont-name: font-awesome
:stylesdir: css

= [navy]#OASP4NET Guide#

== [navy]#Introduction#

== [navy]#The package#
=== [navy]#HTML User guide#
=== [navy]#Application templates#
=== [navy]#Samples#
=== [navy]#Software#
=== [navy]#Tobago#
==== [navy]#EA Models#
==== [navy]#Templates#
=== [navy]#IDE#
==== [navy]#Available platforms#
==== [navy]#Plugins#
== [navy]#Cookbook#
=== [navy]#Data management#
==== [navy]#EF Code first#
==== [navy]#EF Database first#
=== [navy]#Repositories#
=== [navy]#Services#
=== [navy]#Swagger integration#
=== [navy]#Logging module#
==== [navy]#Log file#
==== [navy]#Database log#
==== [navy]#Seq log#
=== [navy]#JWT module#
=== [navy]#AOP module#
=== [navy]#Testing with XUnit#
[quote, About xUnit.net, https://xunit.github.io/#documentation]
____
xUnit.net is a free, open source, community-focused unit testing tool for the .NET Framework. Written by the original inventor of NUnit v2, xUnit.net is the latest technology for unit testing C#, F#, VB.NET and other .NET languages. xUnit.net works with ReSharper, CodeRush, TestDriven.NET and Xamarin. It is part of the .NET Foundation, and operates under their code of conduct. It is licensed under Apache 2 (an OSI approved license).
____

_Facts_ are tests which are always true. They test invariant conditions.

_Theories_ are tests which are only true for a particular set of data.

=== [navy]#The first test#

[Source,c#]
----
using Xunit;

namespace MyFirstUnitTests
{
    public class Class1
    {
        [Fact]
        public void PassingTest()
        {
            Assert.Equal(4, Add(2, 2));
        }

        [Fact]
        public void FailingTest()
        {
            Assert.Equal(5, Add(2, 2));
        }

        int Add(int x, int y)
        {
            return x + y;
        }
    }
}
----
=== [navy]#The first test with theory#
_Theory_ attribute is used to create tests with input params:

[Source,c#]
----
[Theory]
[InlineData(3)]
[InlineData(5)]
[InlineData(6)]
public void MyFirstTheory(int value)
{
    Assert.True(IsOdd(value));
}

bool IsOdd(int value)
{
    return value % 2 == 1;
}
----
=== Cheat Sheet
[options="header"]
|=======================
|Operation| Example
|Test|

[Fact]

public void Test() 
{
}
|Setup|public class TestFixture {
public TestFixture() 
{

...
    
    }
    
}
|Teardown|public class TestFixture : IDisposable 

{

public void Dispose() {

 ...
 }
 
}
|=======================


=== Console runner return codes
[options="header"]
|=======================
|Code| Meaning
|0|The tests ran successfully.
|1|One or more of the tests failed.
|2|The help page was shown, either because it was requested, or because the user did not provide any command line arguments.
|3|	There was a problem with one of the command line options passed to the runner.
|4|There was a problem loading one or more of the test assemblies (for example, if a 64-bit only assembly is run with the 32-bit test runner).
|=======================

==  [navy]#Layer specification#

=== [navy]#Publishing#
==== [navy]#Nginx#
In order to deploy your application to a Nginx server on Linux platform you can follow the instructions from _Microsoft_ link:./offline/nginx.html[here].

==== [navy]#IIS#

In this point is shown the configuration options that must implement the .Net Core application.

Supported operating systems:

* Windows 7 and newer
* Windows Server 2008 R2 and newer*

WebListener server will not work in a reverse-proxy configuration with IIS. You must use the https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel?tabs=aspnetcore2x[Kestrel server].

[underline]#IIS configuration#

Enable the Web Server (IIS) role and establish role services.

*Windows desktop operating systems*

Navigate to Control Panel > Programs > Programs and Features > Turn Windows features on or off (left side of the screen). Open the group for Internet Information Services and Web Management Tools. Check the box for IIS Management Console. Check the box for World Wide Web Services. Accept the default features for World Wide Web Services or customize the IIS features to suit your needs.

image::images/iis_1.png[, link="images/iis_1.png"]

*Conceptually, the IIS configuration described in this document also applies to hosting ASP.NET Core applications on Nano Server IIS, but refer to ASP.NET Core with IIS on Nano Server for specific instructions.

*Windows Server operating systems*
For server operating systems, use the Add Roles and Features wizard via the Manage menu or the link in Server Manager. On the Server Roles step, check the box for Web Server (IIS).

image::images/iis_2.png[, link="images/iis_2.png"]

On the Role services step, select the IIS role services you desire or accept the default role services provided.

image::images/iis_3.png[, link="images/iis_3.png"]
Proceed through the Confirmation step to install the web server role and services. A server/IIS restart is not required after installing the Web Server (IIS) role.


[underline]#Install the .NET Core Windows Server Hosting bundle#

. Install the .NET Core Windows Server Hosting bundle on the hosting system. The bundle will install the .NET Core Runtime, .NET Core Library, and the ASP.NET Core Module. The module creates the reverse-proxy between IIS and the Kestrel server. Note: If the system doesn't have an Internet connection, obtain and install the Microsoft Visual C++ 2015 Redistributable before installing the .NET Core Windows Server Hosting bundle.

. Restart the system or execute net stop was /y followed by net start w3svc from a command prompt to pick up a change to the system PATH.


NOTE: If you use an IIS Shared Configuration, see ASP.NET Core Module with IIS Shared Configuration.

To configure IISIntegration service options, include a service configuration for IISOptions in ConfigureServices:

[source, c#]
----
services.Configure<IISOptions>(options => 
{
    ...
});
----


[options="header"]
|=======================
|Option|Default|Setting
|AutomaticAuthentication| true |If true, the authentication middleware sets the HttpContext.User and responds to generic challenges. If false, the authentication middleware only provides an identity (HttpContext.User) and responds to challenges when explicitly requested by the AuthenticationScheme. Windows Authentication must be enabled in IIS for AutomaticAuthentication to function.
|AuthenticationDisplayName | null| 	Sets the display name shown to users on login pages.
|ForwardClientCertificate |true|If true and the  MS-ASPNETCORE-CLIENTCERT request header is present, the HttpContext.Connection.ClientCertificate is populated.
|=======================


[underline]#web.config#

The web.config file configures the ASP.NET Core Module and provides other IIS configuration. Creating, transforming, and publishing web.config is handled by Microsoft.NET.Sdk.Web, which is included when you set your project's SDK at the top of your .csproj file, <Project Sdk="Microsoft.NET.Sdk.Web">. To prevent the MSBuild target from transforming your web.config file, add the <IsTransformWebConfigDisabled> property to your project file with a setting of true:

[source, xml]
----
<PropertyGroup>
  <IsTransformWebConfigDisabled>true</IsTransformWebConfigDisabled>
</PropertyGroup>
----

==== [navy]#Azure#
In order to deploy your application to Azure platform you can follow the instructions from _Microsoft_:

*Set up the development environment*

*   Install the latest&nbsp;https://www.visualstudio.com/vs/azure-tools/[Azure SDK for Visual Studio]. The SDK installs Visual Studio if you don't already have it.

*   Verify your&nbsp;https://portal.azure.com/[Azure account]. You can&nbsp;https://azure.microsoft.com/pricing/free-trial/[open a free Azure account]&nbsp;or&nbsp;https://azure.microsoft.com/pricing/member-offers/msdn-benefits-details/[Activate Visual Studio subscriber benefits].

*Create a web app*

In the Visual Studio Start Page, select&nbsp;**File > New > Project...**

image::./offline/azure_files/file_new_project.png[File menu]

Complete the&nbsp;**New Project**&nbsp;dialog:

*   In the left pane, select&nbsp;**.NET Core**.

*   In the center pane, select&nbsp;**ASP.NET Core Web Application**.

*   Select&nbsp;**OK**.

image::./offline/azure_files/new_prj.png[New Project dialog]

In the&nbsp;**New ASP.NET Core Web Application**&nbsp;dialog:

*   Select&nbsp;**Web Application**.

*   Select&nbsp;**Change Authentication**.

image::./offline/azure_files/new_prj_2.png[New Project dialog]

The&nbsp;**Change Authentication**&nbsp;dialog appears.

*   Select&nbsp;**Individual User Accounts**.

*   Select&nbsp;**OK**&nbsp;to return to the&nbsp;**New ASP.NET Core Web Application**, then select&nbsp;**OK**&nbsp;again.

image::./offline/azure_files/new_prj_auth.png[New ASP.NET Core Web authentication dialog]

Visual Studio creates the solution.

*Run the app locally*

*   Choose&nbsp;**Debug**&nbsp;then&nbsp;**Start Without Debugging**&nbsp;to run the app locally.

*   Click the&nbsp;**About**&nbsp;and&nbsp;**Contact**&nbsp;links to verify the web application works.

image::./offline/azure_files/show.png[Web application open in Microsoft Edge on localhost]

*   Select&nbsp;**Register**&nbsp;and register a new user. You can use a fictitious email address. When you submit, the page displays the following error:

__"Internal Server Error: A database operation failed while processing the request. SQL exception: Cannot open the database. Applying existing migrations for Application DB context may resolve this issue."__

*   Select&nbsp;**Apply Migrations**&nbsp;and, once the page updates, refresh the page.

image::../offline/azure_files/mig.png[Internal Server Error: A database operation failed while processing the request. SQL exception: Cannot open the database. Applying existing migrations for Application DB context may resolve this issue.]

The app displays the email used to register the new user and a&nbsp;**Log out**&nbsp;link.

image::./offline/azure_files/hello.png[Web application open in Microsoft Edge. The Register link is replaced by the text Hello email@domain.com!]

*Deploy the app to Azure*

Close the web page, return to Visual Studio, and select&nbsp;**Stop Debugging**&nbsp;from the&nbsp;**Debug**&nbsp;menu.

Right-click on the project in Solution Explorer and select&nbsp;**Publish...**.

image::./offline/azure_files/pub.png[Contextual menu open with Publish link highlighted]

In the&nbsp;**Publish**&nbsp;dialog, select&nbsp;**Microsoft Azure App Service**&nbsp;and click&nbsp;**Publish**.

image::./offline/azure_files/maas1.png[Publish dialog]

*   Name the app a unique name.

*   Select a subscription.

*   Select&nbsp;**New...**&nbsp;for the resource group and enter a name for the new resource group.

*   Select&nbsp;**New...**&nbsp;for the app service plan and select a location near you. You can keep the name that is generated by default.

image::./offline/azure_files/newrg1.png[App Service dialog]

*   Select the&nbsp;**Services**&nbsp;tab to create a new database.

*   Select the green&nbsp;**+**&nbsp;icon to create a new SQL Database

image::./offline/azure_files/sql.png[New SQL Database]

*   Select&nbsp;**New...**&nbsp;on the&nbsp;**Configure SQL Database**&nbsp;dialog to create a new database.

image::./offline/azure_files/conf.png[New SQL Database and server]

The&nbsp;**Configure SQL Server**&nbsp;dialog appears.

*   Enter an administrator user name and password, and then select&nbsp;**OK**. Don't forget the user name and password you create in this step. You can keep the default&nbsp;**Server Name**.

*   Enter names for the database and connection string.

===== Note

"admin" is not allowed as the administrator user name.

image::./offline/azure_files/conf_servername.png[Configure SQL Server dialog]

*   Select&nbsp;**OK**.

Visual Studio returns to the&nbsp;**Create App Service**&nbsp;dialog.

*   Select&nbsp;**Create**&nbsp;on the&nbsp;**Create App Service**&nbsp;dialog.

image::./azure_files/conf_final.png[Configure SQL Database dialog]

*   Click the&nbsp;**Settings**&nbsp;link in the&nbsp;**Publish**&nbsp;dialog.

image::./offline/azure_files/pubc.png[Publish dialog: Connection panel]

On the&nbsp;**Settings**&nbsp;page of the&nbsp;**Publish**&nbsp;dialog:

*   Expand&nbsp;**Databases**&nbsp;and check&nbsp;**Use this connection string at runtime**.

*   Expand&nbsp;**Entity Framework Migrations**&nbsp;and check&nbsp;**Apply this migration on publish**.

*   Select&nbsp;**Save**. Visual Studio returns to the&nbsp;**Publish**&nbsp;dialog.

image::./offline/azure_files/pubs.png[Publish dialog: Settings panel]

Click&nbsp;**Publish**. Visual Studio will publish your app to Azure and launch the cloud app in your browser.

*Test your app in Azure*

*   Test the&nbsp;**About**&nbsp;and&nbsp;**Contact**&nbsp;links

*   Register a new user

image::./offline/azure_files/register.png[Web application opened in Microsoft Edge on Azure App Service]

*Update the app*

*   Edit the&nbsp;__Pages/About.cshtml__&nbsp;Razor page and change its contents. For example, you can modify the paragraph to say "Hello ASP.NET Core!":

    html<button class="action copy" data-bi-name="copy">Copy</button>

[source,c#]
----
@page
@model AboutModel
@{
    ViewData["Title"] = "About";
}
<h2>@ViewData["Title"]</h2>
<h3>@Model.Message</h3>

    <p>Hello ASP.NET Core!</p>

----

*   Right-click on the project and select&nbsp;**Publish...**&nbsp;again.

image::./offline/azure_files/pub.png[Contextual menu open with Publish link highlighted]

*   After the app is published, verify the changes you made are available on Azure.

image::./offline/azure_files/final.png[Verify task is complete]

*Clean up*

When you have finished testing the app, go to the&nbsp;https://portal.azure.com/[Azure portal]&nbsp;and delete the app.

*   Select&nbsp;**Resource groups**, then select the resource group you created.

image::./offline/azure_files/portalrg.png[Azure Portal: Resource Groups in sidebar menu]

*   In the&nbsp;**Resource groups**&nbsp;page, select&nbsp;**Delete**.

image::./offline/azure_files/rgd.png[Azure Portal: Resource Groups page]

*   Enter the name of the resource group and select&nbsp;**Delete**. Your app and all other resources created in this tutorial are now deleted from Azure.

== [navy]#External links#
https://docs.microsoft.com/en-us/aspnet/core/publishing/iis?tabs=aspnetcore2x[Publishing .Net Core on IIS]

https://docs.microsoft.com/en-us/aspnet/core/hosting/aspnet-core-module#aspnet-core-module-with-an-iis-shared-configuration[IIS Shared configuration]

https://docs.microsoft.com/en-us/aspnet/core/publishing/linuxproduction?tabs=aspnetcore2x[Publishing to Nginx]

https://docs.microsoft.com/en-us/aspnet/core/publishing/docker[Publishing to Docker]

